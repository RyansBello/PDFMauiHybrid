@page "/weather"
@inject IJSRuntime JsRuntime
@using ClosedXML.Excel

<h1 id="documentTitle">Weather</h1>

<p>This component demonstrates showing data.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table" id="content">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>

    <div class="d-print-none">
        <a href="@source" class="btn btn-primary btn-sm">
            <i class="fas fa-print"></i> Print
        </a>
        <button class="btn btn-primary" @onclick="Export">Export</button>        
    </div>
    

}

@code {
    private WeatherForecast[]? forecasts;
    bool isMobile;
    string source = "javascript:window.print()";

    protected override async Task OnInitializedAsync()
    {
        isMobile = await JsRuntime.InvokeAsync<bool>("isMobileDevice");

        if (isMobile)
            source = "javascript:createPdf()";
            

        // Simulate asynchronous loading to demonstrate a loading indicator
        await Task.Delay(500);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        forecasts = Enumerable.Range(1, 5).Select(index => new WeatherForecast
            {
                Date = startDate.AddDays(index),
                TemperatureC = Random.Shared.Next(-20, 55),
                Summary = summaries[Random.Shared.Next(summaries.Length)]
            }).ToArray();
    }

    async Task Export()
    {
        if (forecasts?.Length > 0)
        {
            if (isMobile)
            {
                using var workbook = new XLWorkbook();
                var worksheet = workbook.Worksheets.Add("forecasts");

                // Define headers
                worksheet.Cell(1, 1).Value = "Date";
                worksheet.Cell(1, 2).Value = "TemperatureC";
                worksheet.Cell(1, 3).Value = "Summary";
                worksheet.Cell(1, 4).Value = "TemperatureF";

                // Populate the data
                int row = 2;
                foreach (var item in forecasts)
                {
                    worksheet.Cell(row, 1).Value = item.Date.ToString("yyyy-MM-dd");
                    worksheet.Cell(row, 2).Value = item.TemperatureC;
                    worksheet.Cell(row, 3).Value = item.Summary;
                    worksheet.Cell(row, 4).Value = item.TemperatureF;
                    row++;
                }

                // Define the file name
                var fileName = $"ExportedData_{DateTime.Now:yyMMddHHssmm}.xlsx";
                var initialPath = System.IO.Path.Combine(FileSystem.AppDataDirectory, fileName);

                // Save the workbook to a stream
                using var stream = new MemoryStream();
                workbook.SaveAs(stream);
                stream.Position = 0; // Reset the stream position to the beginning

                // Use FileSaver to save the file
                await File.WriteAllBytesAsync(initialPath, stream.ToArray());

                await Launcher.OpenAsync(new OpenFileRequest
                    {
                        File = new ReadOnlyFile(initialPath),
                        Title = "Open Excel"
                    });
            }
            else
            {
                //FOR DEKSTOP, YOU CAN USE API CALL AND CREATE THE EXCEL FILE FROM SERVER AND MAKE IT DOWNLOADABLE
                // var response = await Http.GetAsync($"{Server}/api/MainStore/export?nAcctive={activeIndex}");
                // response.EnsureSuccessStatusCode();

                // var fileBytes = await response.Content.ReadAsByteArrayAsync();
                // var fileName = $"MainStore_{DateTime.Now.ToString("yyyy-MM-dd", System.Globalization.CultureInfo.InvariantCulture)}.xlsx";
                // await JsRuntime.InvokeAsync<object>("saveAsFile", fileName, Convert.ToBase64String(fileBytes));
            }
        }
        else
        {
            await Application.Current!.MainPage!.DisplayAlert("Info", "No Data To Export", "Ok");
        }
    }

    private class WeatherForecast
    {
        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    }
}
